name: release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BUILD_CMD: ""   # ä¾‹: "npm ci && npm run build"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build
        if: env.BUILD_CMD != ''
        run: $BUILD_CMD

      - name: Determine ASSET_PREFIX automatically
        id: prefix
        run: |
          if [ -f manifest.json ]; then
            NAME=$(jq -r '.name' manifest.json | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9_-]//g')
          else
            NAME=$(basename "$GITHUB_REPOSITORY")
          fi
          echo "ASSET_PREFIX=$NAME" >> $GITHUB_ENV
          echo "asset_prefix=$NAME" >> $GITHUB_OUTPUT

      - name: Read version from manifest.json
        id: ver
        run: |
          VER=$(jq -r '.version' manifest.json)
          DATE=$(date +%Y%m%d)
          echo "VER=$VER" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "ZIP_NAME=${ASSET_PREFIX}_v${VER}_${DATE}.zip" >> $GITHUB_ENV

      - name: Stage files under fixed top-level folder
        run: |
          rm -rf "$ASSET_PREFIX"
          mkdir "$ASSET_PREFIX"
          rsync -a ./ "$ASSET_PREFIX"/ \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude "node_modules/" \
            --exclude "*.zip"

      - name: Make zip with fixed top-level folder
        run: |
          zip -r "$ZIP_NAME" "$ASSET_PREFIX"

      - name: SHA256
        run: |
          sha256sum "$ZIP_NAME" > "${ZIP_NAME}.sha256"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ZIP_NAME }}
            ${{ env.ZIP_NAME }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move/Create tag "latest"
        uses: actions/github-script@v7
        with:
          script: |
            const ref = 'tags/latest';
            const sha = context.sha;
            try {
              await github.rest.git.updateRef({ owner: context.repo.owner, repo: context.repo.repo, ref, sha, force: true });
            } catch (e) {
              await github.rest.git.createRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `refs/${ref}`, sha });
            }
